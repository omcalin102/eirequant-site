---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import CurveChart from "../../components/CurveChart.tsx";

/** Generate static paths for each portfolio as a STRING param (not array). */
export async function getStaticPaths() {
  const entries = await getCollection("portfolios");
  return entries.map((entry) => {
    const s = entry.data?.slug ?? entry.slug;
    return { params: { slug: String(s) } };
  });
}

// Resolve the incoming slug robustly (string expected, but support array just in case)
const param = Astro.params.slug;
const slugParam = Array.isArray(param) ? param.join("/") : param;

const all = await getCollection("portfolios");
const item = all.find((p) => (p.data?.slug ?? p.slug) === slugParam);
if (!item) {
  throw new Error(`Portfolio not found: ${slugParam}`);
}

const d: any = item.data ?? {};
const title = d.title ?? d.name ?? slugParam;
const summary = d.summary ?? d.objective ?? "Portfolio details.";
const allocation = d.allocation;
const rebalance = d.rebalance;
const chartKey = d.chartKey ?? "";
const updated = d.updated;
---
<BaseLayout title={`${title} · Portfolios · EireQuant`} description={summary}>
  <h1>{title}</h1>
  {summary && <p class="lead">{summary}</p>}

  <section class="grid">
    <div>
      <CurveChart client:load chartKey={chartKey} title="Equity Curve" showDrawdown />
    </div>

    <aside>
      <div class="panel">
        <h3>Allocation</h3>
        {allocation ? (
          <table class="alloc">
            <tbody>
              {Object.entries(allocation).map(([k, v]) => (
                <tr><td>{k}</td><td style="text-align:right">{v}%</td></tr>
              ))}
            </tbody>
          </table>
        ) : <p>Allocation details coming soon.</p>}
      </div>

      <div class="panel">
        <h3>Rebalance</h3>
        <p>{rebalance ?? "TBD"}</p>
      </div>

      {updated && <div class="meta">Last updated: {updated}</div>}
    </aside>
  </section>

  <style>
    .lead{ color:#555; }
    .grid{ display:grid; grid-template-columns: 1.5fr .9fr; gap:1rem; align-items:start; }
    .panel{ border:1px solid #eee; border-radius:12px; padding:1rem; background:#fff; margin-bottom:.75rem; }
    .alloc{ width:100%; border-collapse:collapse; }
    .alloc td{ padding:.25rem 0; border-bottom:1px solid #f3f3f3; }
    .alloc tr:last-child td{ border-bottom:0; }
    .meta{ color:#666; margin-top:.25rem; }
    @media (max-width: 980px){ .grid{ grid-template-columns: 1fr; } }
  </style>
</BaseLayout>
