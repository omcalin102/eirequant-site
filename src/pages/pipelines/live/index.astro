---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import PolicyTrace from "../../../components/charts/PolicyTrace.tsx";
---
<BaseLayout title="Live Pipeline · EireQuant">
  <h1>Live Pipeline</h1>

  <section class="panel">
    <div class="grid4">
      <div><div class="k">Status</div><div id="st" class="v">—</div></div>
      <div><div class="k">Last run</div><div id="lr" class="v">—</div></div>
      <div><div class="k">Trading</div><div id="tr" class="v">—</div></div>
      <div><div class="k">Current model</div><div id="cm" class="v">—</div></div>
    </div>
  </section>

  <section class="panel">
    <div class="head"><h2>Model Selection</h2><div class="muted" id="ms-date">—</div></div>
    <table class="table">
      <thead><tr><th>Ticker</th><th>Action</th><th>Confidence</th></tr></thead>
      <tbody id="ms"><tr><td colspan="3" class="muted">No selections.</td></tr></tbody>
    </table>
  </section>

  <section class="panel">
    <h2>Portfolio Greeks</h2>
    <div class="greeks">
      <div class="chip"><div class="gk">Δ</div><div id="g-d" class="gval">—</div></div>
      <div class="chip"><div class="gk">Γ</div><div id="g-g" class="gval">—</div></div>
      <div class="chip"><div class="gk">ν</div><div id="g-v" class="gval">—</div></div>
    </div>
  </section>

  <section class="panel">
    <h2>Sector Health</h2>
    <ul id="sec" class="list"><li class="muted">No sector data.</li></ul>
  </section>

  <section class="panel">
    <PolicyTrace client:load />
  </section>

  <section class="panel">
    <h2>Ops Health</h2>
    <ul id="ops" class="list"><li class="muted">No ops data.</li></ul>
  </section>

  <script type="module">
    const baseHref = () => (document.querySelector("base")?.getAttribute("href") || "/").replace(/\/+$/, "/");
    const url = (p) => (baseHref() + String(p).replace(/^\//,"")).replace(/([^:]\/)\/+/g,"$1");
    const $ = (s)=>document.querySelector(s);
    const list = (el, rows)=>{ el.innerHTML = rows.map(r=>`<li>${r}</li>`).join("") };
    const fmt = (x)=> x==null ? "—" : (isFinite(+x) ? (+x).toFixed(3) : x);
    const fmtPct = (x)=> (x==null||!isFinite(+x)) ? "—" : ((+x)*100).toFixed(2)+"%";
    async function j(p){ const r = await fetch(url(p), {cache:"no-cache"}); if(!r.ok) throw new Error(p); return r.json(); }

    async function getLatestDate(){
      const a = await j("/data/latest.json").catch(()=>null);
      if (a?.date) return a.date;
      const b = await j("/data/daily/latest.json").catch(()=>null);
      return b?.date ?? null;
    }

    async function main(){
      const st = await j("/data/pipeline/status.json").catch(()=>null);
      if (st){
        $("#st").textContent = (st.status ?? st.state ?? "—");
        $("#lr").textContent = (st.last_run ?? st.last ?? st.date ?? "—");
        $("#tr").textContent = (st.trading===true||st.trading==="true") ? "Yes" : (st.trading===false ? "No" : "—");
        $("#cm").textContent = (st.current_model ?? st.model ?? "—");
      }

      const date = await getLatestDate();
      if (date) $("#ms-date").textContent = date;

      const sel = date ? await j(`/data/daily/${date}/model_selection.json`).catch(()=>null) : null;
      if (sel?.selections?.length){
        $("#ms").innerHTML = sel.selections.map(s =>
          `<tr><td>${s.ticker}</td><td>${s.action}</td><td>${fmtPct(s.conf ?? s.confidence)}</td></tr>`
        ).join("");
      }

      // Greeks: daily medians if present; else latest proxies
      let dlt=null,gmm=null,vga=null;
      if (date){
        const g = await j(`/data/daily/${date}/risk_greeks.json`).catch(()=>null);
        if (g){
          dlt = g.delta ?? g.Delta ?? g.stats?.beta_median ?? null;
          gmm = g.gamma ?? g.Gamma ?? g.stats?.gamma_median ?? null;
          vga = g.nu ?? g.Vega ?? g.v ?? g.stats?.vega_median ?? null;
        }
      }
      if (dlt==null || gmm==null || vga==null){
        const prox = await j("/data/models/eqx-m1/greek_proxies.json").catch(()=>null);
        const last = prox?.proxies?.length ? prox.proxies[prox.proxies.length-1] : null;
        if (last){
          if (dlt==null) dlt = last.delta ?? null;
          if (gmm==null) gmm = last.gamma ?? null;
          if (vga==null) vga = last.vega ?? null;
        }
      }
      if (dlt!=null) $("#g-d").textContent = fmt(dlt);
      if (gmm!=null) $("#g-g").textContent = fmt(gmm);
      if (vga!=null) $("#g-v").textContent = fmt(vga);

      const sh = date ? await j(`/data/daily/${date}/sector_health.json`).catch(()=>null) : null;
      if (Array.isArray(sh?.sectors) && sh.sectors.length){
        const rows = sh.sectors.slice(0,10).map(s => {
          const nm = s.sector ?? s.name ?? "Sector";
          const val = s.score ?? s.value ?? s.median_beta ?? s.n_names ?? null;
          return `<strong>${nm}</strong> — ${fmt(val)}`;
        });
        list($("#sec"), rows);
      } else if (Array.isArray(sh?.leaders) && sh.leaders.length){
        const rows = sh.leaders.slice(0,10).map(s => `<strong>${s.name ?? s.sector}</strong> — ${fmt(s.score ?? s.value)}`);
        list($("#sec"), rows);
      }

      const ops = await j("/data/models/eqx-m1/ops_health.json").catch(()=>null);
      if (ops?.modules?.length){
        list($("#ops"), ops.modules.map(m => `<strong>${m.name ?? "module"}</strong>: ${m.status ?? "ok"}${m.note ? ` — ${m.note}`:""}`));
      } else if (ops && typeof ops === "object"){
        const rows = Object.keys(ops).map(k => `<strong>${k}</strong>: ${ops[k]}`);
        if (rows.length) list($("#ops"), rows);
      }
    }

    main().catch(e=>console.warn("live pipeline:", e));
  </script>

  <style>
    .panel{background:#fff;border:1px solid var(--border);border-radius:12px;padding:1rem;margin:1rem 0;box-shadow:0 6px 18px rgba(0,0,0,.05)}
    .grid4{display:grid;grid-template-columns:repeat(4,minmax(0,1fr));gap:1rem}
    @media(max-width:900px){.grid4{grid-template-columns:repeat(2,1fr)}}
    .k{font-size:.8rem;color:#666}
    .v{font-weight:700}
    .head{display:flex;align-items:center;justify-content:space-between;gap:1rem}
    .muted{color:var(--muted)}
    .table{width:100%;border-collapse:separate;border-spacing:0;border:1px solid var(--border);border-radius:10px;overflow:hidden}
    .table th,.table td{padding:.55rem .7rem;border-bottom:1px solid var(--border)}
    .table thead th{background:#fafafa;text-align:left}
    .table tr:last-child td{border-bottom:0}
    .greeks{display:flex;gap:.6rem;flex-wrap:wrap}
    .chip{border:1px solid var(--border);border-radius:12px;padding:.55rem .75rem;display:grid;grid-template-columns:auto 1fr;gap:.5rem;align-items:center;background:#fff}
    .gk{font-weight:700}
    .gval{color:#333}
    .list{list-style:none;margin:.25rem 0 0;padding:0;display:grid;gap:.35rem}
  </style>
</BaseLayout>
